#!/usr/bin/env bash

#  https://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-true} # Set this to true to debug failing tests

source $(dirname $0)/test_helper

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  # set -o verbose # Comment for now, makes debugging too hard, needs to default to false and have flag: http://www.pivotaltracker.com/story/show/5430700
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

trap onexit HUP INT QUIT TERM ERR

exec_remotely_quiet() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host "$@"
}

onexit_hook() {
  if ! $_test_remote_build_ami; then
    # guard clause to skip onexit_hook if we didn't start any EC2 resources
    return 0
  fi
  if [[ $boxbuilder_terminate_ec2_resources = true ]]; then
    if [[ -n $boxbuilder_built_instance_id ]]; then
      # delete instance
      _terminate_instances_result=$(ec2-terminate-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$boxbuilder_built_instance_id")
      echo "$_log_prefix ec2-terminate-instances result for instance $boxbuilder_built_instance_id:"
      echo "$(sed -n l <<< $_terminate_instances_result)"
    fi

    if [[ -n $boxbuilder_created_ami_id ]]; then
      # delete AMI
      _deregister_result=$(ec2-deregister --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$boxbuilder_created_ami_id")
      echo "$_log_prefix ec2-deregister result for image $boxbuilder_created_ami_id:"
      echo "$(sed -n l <<< $_deregister_result)"
    fi

    if [[ -n $boxbuilder_created_ami_ebs_snapshot_id ]]; then
      # delete snapshot
      _delete_snapshot_result=$(ec2-delete-snapshot --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$boxbuilder_created_ami_ebs_snapshot_id")
      echo "$_log_prefix ec2-delete-snapshot result for snapshot $boxbuilder_created_ami_ebs_snapshot_id:"
      echo "$(sed -n l <<< $_delete_snapshot_result)"
    fi
  fi
}

setup() {
  # setup basic variables for test
  boxbuilder_dir="$(dirname $0)/.."

  boxbuilder_keypair=${boxbuilder_keypair:-}
  if [[ -z $boxbuilder_keypair ]]; then
    _all_keypairs=( $HOME/.ec2/keypair-*.pem ) # put all keypair filenames into bash array
    boxbuilder_keypair=${_all_keypairs[0]} # grab first keypair filename
    echo "$_log_prefix boxbuilder_keypair is not set, loading from $HOME/.ec2/keypair-*.pem ..."
  fi
  if [[ ! -f $boxbuilder_keypair ]]; then
    echo "$_log_prefix  Please set 'boxbuilder_keypair' to the path of your ssh private key file, or put it at $HOME/.ec2/keypair-*.pem where it will automatically be detected."
    return 1
  else
    echo "$_log_prefix boxbuilder_keypair=$boxbuilder_keypair"
  fi

  boxbuilder_config=${boxbuilder_config:-'echo'}

  boxbuilder_config="$boxbuilder_config; export boxbuilder_user=$boxbuilder_user"

  # override a chef config value via boxbuilder_config before the test build run, it will be tested later
  overridden_touchfile_value='boxbuilder_example_main_chef_config_value_overridden'
  boxbuilder_config="$boxbuilder_config; export boxbuilder_example_main_chef_config_key='$overridden_touchfile_value'"
  export boxbuilder_config

  export boxbuilder_keypair
  export boxbuilder_debug
}

run_boxbuilder_remote_build_ami() {
  export boxbuilder_builder_instance_ami_id
  export PATH=$EC2_HOME/bin:$PATH # TODO: this should be automatic, see tracker stories
  # TODO: grep boxbuilder_keypair value out of boxbuilder_remote_build_ami output

  boxbuilder_terminate_ec2_resources=${boxbuilder_terminate_ec2_resources:-true}
  export boxbuilder_terminate_ec2_resources
  
  if [[ $boxbuilder_terminate_ec2_resources == false ]]; then
    boxbuilder_ec2_resource_tag="boxbuilder_non_autoterminating_temp_resource_safe_to_terminate_$(date +%Y%m%d-%H%M)"
  fi

  boxbuilder_ec2_resource_tag=${boxbuilder_ec2_resource_tag:-"boxbuilder_temp_resource_safe_to_terminate"}
  export boxbuilder_ec2_resource_tag

  # add specific variables for building AMIs to boxbuilder_config
  boxbuilder_config="$boxbuilder_config; export boxbuilder_ec2_resource_tag=$boxbuilder_ec2_resource_tag; export boxbuilder_ami_prefix=$boxbuilder_ec2_resource_tag"
  export boxbuilder_config

  # initialize local script variables to avoid unbound variable errors
  # in onexit hook which terminates resources if test fails and they are not set
  boxbuilder_built_instance_id=${boxbuilder_built_instance_id:-''}
  boxbuilder_created_ami_id=${boxbuilder_created_ami_id:-''}
  boxbuilder_created_ami_ebs_snapshot_id=${boxbuilder_created_ami_ebs_snapshot_id:-''}

  set +o xtrace # even if boxbuilder_debug is on, always turn off tracing
                # while running boxbuilder_remote_build_ami and grabbing output,
                # test output is huge and confusing

  # Invoke boxbuilder_remote_build_ami to build a test AMI
  boxbuilder_remote_build_ami_output=$($boxbuilder_dir/boxbuilder_remote_build_ami)

  # Start built AMI
  echo; echo; echo
  echo "-------- BEGIN OUTPUT OF boxbuilder_remote_build_ami --------"
  echo "$boxbuilder_remote_build_ami_output"
  echo "-------- END OUTPUT OF boxbuilder_remote_build_ami --------"
  echo; echo; echo

  ami_vars=$(echo "$boxbuilder_remote_build_ami_output" | grep -e '^boxbuilder_created_ami_')

  if [[ $boxbuilder_debug = true ]]; then
    # turn back on tracing if we are debugging
    set -o xtrace
  fi

  echo "$ami_vars"
  eval $ami_vars
  # Strip carriage returns which show up after eval
  boxbuilder_created_ami_id="$(tr -d '\r' < <(echo $boxbuilder_created_ami_id) )"
  boxbuilder_created_ami_ebs_snapshot_id="$(tr -d '\r' < <(echo $boxbuilder_created_ami_ebs_snapshot_id) )"

  # Start up an instance from the test AMI we just built, so we can perform tests to confirm
  # that the AMI was created correctly
  boxbuilder_built_instance_id=$(ec2-run-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
    --key "$EC2_KEYPAIR_NAME" \
    --availability-zone us-east-1a \
    --instance-type "m1.large" \
    "$boxbuilder_created_ami_id" \
    -d "$boxbuilder_ec2_resource_tag" \
    | egrep ^INSTANCE | cut -f2)

  # wait for the instance to start
  let _instance_startup_elapsed_time=1 # HACK: don't initialize to zero avoid error due to nonzero rc.  arithmetic false is not shell false.  zero is false is one :)  See http://wiki.bash-hackers.org/syntax/arith_expr#arithmetic_expressions_and_return_codes
  let _instance_startup_check_interval=10
  while boxbuilder_built_instance_host=$(ec2-describe-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
     "$boxbuilder_built_instance_id" | \
    egrep ^INSTANCE | cut -f4) && [[ -z $boxbuilder_built_instance_host ]]; do
      echo -n .
      sleep $_instance_startup_check_interval
      let _instance_startup_elapsed_time=$_instance_startup_elapsed_time+$_instance_startup_check_interval
      if (( $_instance_startup_elapsed_time > 150 )); then
        echo "$_log_prefix Unable to start instance for AMI $boxbuilder_created_ami_id after $_instance_startup_elapsed_time seconds.  Aborting."
        return 1
      fi
  done
  echo "$_log_prefix Got hostname $boxbuilder_built_instance_host for instance $boxbuilder_built_instance_id"
  echo "$_log_prefix Waiting for ssh connectivity to $boxbuilder_built_instance_host ..."
  let _instance_startup_elapsed_time=1
  let _instance_startup_check_interval=10
  while ssh_up=$(ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_built_instance_host "echo 'ssh up'"); [[ "$ssh_up" != "ssh up" ]]; do
    echo -n .
    sleep $_instance_startup_check_interval
    let _instance_startup_elapsed_time=$_instance_startup_elapsed_time+$_instance_startup_check_interval
    echo "$_log_prefix SSH connect response from $boxbuilder_built_instance_host: $ssh_up"
    echo "$_log_prefix Trying to SSH to $boxbuilder_built_instance_host again after 5 seconds..."
    if (( $_instance_startup_elapsed_time > 150 )); then
        echo "$_log_prefix Unable to SSH to $boxbuilder_built_instance_host after $_instance_startup_elapsed_time seconds.  Aborting."
      return 1
    fi
  done
  boxbuilder_host=$boxbuilder_built_instance_host
}

run_boxbuilder_remote_bootstrap() {
  export boxbuilder_host
  # Run boxbuilder_remote_bootstrap on boxbuilder_host
  boxbuilder_remote_bootstrap_output=$($boxbuilder_dir/boxbuilder_remote_bootstrap)

  echo; echo; echo
  echo "-------- BEGIN OUTPUT OF boxbuilder_remote_bootstrap --------"
  echo "$boxbuilder_remote_bootstrap_output"
  echo "-------- END OUTPUT OF boxbuilder_remote_bootstrap --------"
  echo; echo; echo
}

test_can_log_in_as_user() {
  remote_user=$(exec_remotely_quiet "whoami")
  assert_equal $boxbuilder_user $remote_user
}

test_can_install_rvm() {
  rvm_info=$(exec_remotely_quiet "rvm info | head -n 1")
  assert_match 'ruby' $rvm_info
}

test_can_set_up_and_run_chef() {
  example_dependency_touchfile_contents=$(exec_remotely_quiet 'cat $HOME/.tmp_boxbuilder_example_dependency_chef_cookbook.touchfile')
  assert_match 'boxbuilder_example_dependency_chef_config_set_from_main_value' $example_dependency_touchfile_contents
}

test_boxbuilder_setup_can_be_used_to_override_chef_config_values() {
  example_main_touchfile_contents=$(exec_remotely_quiet 'cat $HOME/.tmp_boxbuilder_example_main_chef_cookbook.touchfile')
  assert_equal $overridden_touchfile_value $example_main_touchfile_contents
}

suite_common() {
  setup
  if $_test_remote_build_ami; then
    run_boxbuilder_remote_build_ami
  fi
  run_boxbuilder_remote_bootstrap
  test_can_log_in_as_user
  test_can_install_rvm
  test_can_set_up_and_run_chef
  test_boxbuilder_setup_can_be_used_to_override_chef_config_values
}

suite_existing_boxbuilder_host() {
  _test_remote_build_ami=false
  echo
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!! NOTE: boxbuilder_host is set to $boxbuilder_host"
  echo "!!       so we'll SKIP testing of boxbuilder_remote_build_ami on EC2"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo
  boxbuilder_user=${boxbuilder_user:?"Error: boxbuilder_user must also be set if boxbuilder_host is set"}
  echo "$_log_prefix Starting tests for user $boxbuilder_user on existing host $boxbuilder_host ..."
  suite_common
  echo "$_log_prefix All tests passed successfully for user $boxbuilder_user on existing host $boxbuilder_host"
}

suite_ami_build() {
  _test_remote_build_ami=true
  echo "$_log_prefix Starting tests for $boxbuilder_user with builder_instance_ami_id $boxbuilder_builder_instance_ami_id ..."
  suite_common
  echo "$_log_prefix All tests passed successfully for $boxbuilder_user with builder_instance_ami_id $boxbuilder_builder_instance_ami_id ..."
}

suite_ubuntu_ami_build() {
  boxbuilder_user=${boxbuilder_user:-"ubuntu"}
  boxbuilder_builder_instance_ami_id=${boxbuilder_builder_instance_ami_id:-"ami-4b4ba522"}
  suite_ami_build
}

suite_centos_ami_build() {
  boxbuilder_user=${boxbuilder_user:-"centos"}
  # boxbuilder_builder_instance_ami_id=${boxbuilder_builder_instance_ami_id:-"ami-4d42a924"}
  boxbuilder_builder_instance_ami_id=${boxbuilder_builder_instance_ami_id:-"ami-1402f77d"} # rightscale doesn't have a centos 55 ami, this is a random one I found
  suite_ami_build
}

unset_vars() {
  unset boxbuilder_user
  unset boxbuilder_host
  unset boxbuilder_builder_instance_ami_id
  unset boxbuilder_created_ami_ebs_snapshot_id
  unset boxbuilder_created_ami_id
  unset boxbuilder_built_instance_id
  # re-initialize local script variables used in onexit hook, to avoid unbound variable errors
  boxbuilder_built_instance_id=''
  boxbuilder_created_ami_id=''
  boxbuilder_created_ami_ebs_snapshot_id=''
}

suite() {
  echo "$_log_prefix Starting tests ..."
  if [ -e $HOME/.boxbuilder_testrc ]; then
    # Set test vars
    source $HOME/.boxbuilder_testrc # don't use .boxbuilderrc file, we don't want to pollute it with test vars
  fi

  boxbuilder_host=${boxbuilder_host:-}
  if [[ -n $boxbuilder_host ]]; then
    suite_existing_boxbuilder_host
    echo "$_log_prefix All tests passed successfully (boxbuilder_remote_build_ami tests were not run)"
  else
    test_ubuntu_ami=${test_ubuntu_ami:-true}
    if $test_ubuntu_ami; then
      suite_ubuntu_ami_build
      unset_vars
    fi

    test_centos_ami=${test_centos_ami:-false}
    if $test_centos_ami; then
      suite_centos_ami_build
      unset_vars
    fi

    echo "$_log_prefix All tests passed successfully"
  fi
}

suite
onexit
