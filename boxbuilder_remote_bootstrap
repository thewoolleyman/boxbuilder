#!/usr/bin/env bash

#  https://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  # set -o verbose # Comment for now, makes debugging too hard, needs to default to false and have flag: http://www.pivotaltracker.com/story/show/5430700
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

detect_platform_remotely() {
  _remote_uname=$(exec_remotely_quiet "uname -a")
  if echo "$_remote_uname" | grep -i 'debian'; then
    _remote_platform='debian'
  elif echo "$_remote_uname" | grep -i 'ubuntu'; then
    _remote_platform='debian'
  elif exec_remotely "test -f /etc/redhat-release"; then
    _remote_platform='redhat'
  elif echo "$_remote_uname" | grep -i 'darwin'; then
    # TODO: for now, darwin platform assumes you are using HomeBrew
    _remote_platform='darwin'
  else
    echo "$_log_prefix error on line $LINENO - unable to determine supported remote platform from uname: '$_remote_uname'"
    return 1
  fi
  echo "$_log_prefix  Remote platform detected as '$_remote_platform'"
}

exec_remotely() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  echo "ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host \"$@\""
  ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host "$@"
}

exec_remotely_quiet() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  # echo "ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host \"$@\""
  ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host "$@"
}

exec_remotely_pseudo_tty() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  echo "ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -t -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host \"$@\""
  ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -t -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_host "$@"
}

exec_remotely_quiet_root() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  ssh -o 'StrictHostKeyChecking no' -o 'PasswordAuthentication no' -i $boxbuilder_keypair root@$boxbuilder_host "$@"
}

check_for_root_ssh_access() {
  echo "$_log_prefix  checking for root ssh access on $boxbuilder_host ..."
  if exec_remotely_quiet_root 'id'; then
    echo "$_log_prefix  SSH access exists for root ..."
    _root_ssh_access_exists=true
  else
    echo "$_log_prefix  SSH access does not exist for root ..."
    _root_ssh_access_exists=false
  fi
}

grant_nopasswd_sudo_access_from_boxbuilder_user() {
  echo "$_log_prefix  Checking 'admin' group membership for user $boxbuilder_user on host $boxbuilder_host."
  if ! exec_remotely_quiet "groups | grep -q -e 'admin'"; then
    echo "$_log_prefix error on line $LINENO - user $boxbuilder_user is not a member of the 'admin' group on host $boxbuilder_host.  Please add..."
    return 1
  fi

  echo "$_log_prefix  Checking no-password and no requiretty sudo access for 'admin' group on host $boxbuilder_host and adding if necessary.  If prompted, please type your password, or ctrl-c to abort..."

  _needs_nopasswd_sudoers_added=false
  if ! exec_remotely_quiet "sudo grep -e '%admin.*ALL.*=.*NOPASSWD.*:.*ALL' /etc/sudoers"; then
    _needs_nopasswd_sudoers_added=true
  fi

  _needs_requiretty_sudoers_removed=false
  if exec_remotely_quiet "sudo grep 'requiretty' /etc/sudoers"; then
    _needs_requiretty_sudoers_removed=true
  fi

  if ! $_needs_nopasswd_sudoers_added && ! $_needs_requiretty_sudoers_removed; then
    echo "$_log_prefix  no sudoers changes needed ..."
    return 0
  fi

  exec_remotely_quiet "sudo cp /etc/sudoers /etc/sudoers.bak"

  _sudoers_additional_error_instructions='Please use visudo to manually make these changes: '
  if $_needs_requiretty_sudoers_removed; then
    exec_remotely_quiet "sudo cat /etc/sudoers | grep -v 'requiretty' > /tmp/sudoers.new"
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Remove 'requiretty' line. "
  else
    exec_remotely_quiet "sudo cp /etc/sudoers /tmp/sudoers.new"
  fi
  exec_remotely_quiet "chmod 0440 /tmp/sudoers.new"

  if $_needs_nopasswd_sudoers_added; then
    echo "$_log_prefix  Giving user $boxbuilder_user NO PASSWORD sudo privileges"
    _new_sudoers_line="%admin ALL=NOPASSWD: ALL"
    exec_remotely_quiet "sudo sh -c 'echo \"$_new_sudoers_line\" >> /tmp/sudoers.new' "
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Add a line '$_new_sudoers_line'. "
  fi

  if ! exec_remotely_quiet "test -e /tmp/sudoers.new"; then
    echo "$_log_prefix error on line $LINENO - Could not add create /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi

  if ! exec_remotely_quiet "sudo visudo -c -s -f /tmp/sudoers.new"; then
    echo "$_log_prefix error on line $LINENO -: Syntax error in /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi
  exec_remotely_quiet "sudo cp /tmp/sudoers.new /etc/sudoers"
}

grant_nopasswd_sudo_access_from_root() {
  echo "$_log_prefix  Checking no-password and no requiretty sudo access for 'admin' group on host $boxbuilder_host and adding if necessary.  If prompted, please type your password, or ctrl-c to abort..."

  _needs_nopasswd_sudoers_added=false
  if ! exec_remotely_quiet_root "grep -e '%admin.*ALL.*=.*NOPASSWD.*:.*ALL' /etc/sudoers"; then
    _needs_nopasswd_sudoers_added=true
  fi

  _needs_requiretty_sudoers_removed=false
  if exec_remotely_quiet_root "grep 'requiretty' /etc/sudoers"; then
    _needs_requiretty_sudoers_removed=true
  fi

  if ! $_needs_nopasswd_sudoers_added && ! $_needs_requiretty_sudoers_removed; then
    echo "$_log_prefix  no sudoers changes needed ..."
    return 0
  fi

  exec_remotely_quiet_root "cp /etc/sudoers /etc/sudoers.bak"

  _sudoers_additional_error_instructions='Please use visudo to manually make these changes: '
  if $_needs_requiretty_sudoers_removed; then
    exec_remotely_quiet_root "cat /etc/sudoers | grep -v 'requiretty' > /tmp/sudoers.new"
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Remove 'requiretty' line. "
  else
    exec_remotely_quiet_root "cp /etc/sudoers /tmp/sudoers.new"
  fi
  exec_remotely_quiet_root "chmod 0440 /tmp/sudoers.new"

  if $_needs_nopasswd_sudoers_added; then
    echo "$_log_prefix  Giving user $boxbuilder_user NO PASSWORD sudo privileges"
    _new_sudoers_line="%admin ALL=NOPASSWD: ALL"
    exec_remotely_quiet_root "sh -c 'echo \"$_new_sudoers_line\" >> /tmp/sudoers.new' "
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Add a line '$_new_sudoers_line'. "
  fi

  if ! exec_remotely_quiet_root "test -e /tmp/sudoers.new"; then
    echo "$_log_prefix error on line $LINENO - Could not add create /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi

  if ! exec_remotely_quiet_root "visudo -c -s -f /tmp/sudoers.new"; then
    echo "$_log_prefix error on line $LINENO -: Syntax error in /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi
  exec_remotely_quiet_root "cp /tmp/sudoers.new /etc/sudoers"
}

grant_nopasswd_sudo_access() {
  if $_root_ssh_access_exists; then
    # attempt to install sudo if it isn't already installed
    exec_remotely_quiet_root "yum install -y sudo"
    grant_nopasswd_sudo_access_from_root
  else
    grant_nopasswd_sudo_access_from_boxbuilder_user
  fi
}

ensure_boxbuilder_user_exists() {
  echo "$_log_prefix  Ensuring boxbuilder_user '$boxbuilder_user' exists on $boxbuilder_host ..."
  if [[ $boxbuilder_user = 'root' ]]; then
    echo "$_log_prefix  boxbuilder_user cannot be root.  Please set \
boxbuilder_user to a non-root user.  If it does not exist, it will be \
automatically created if there is a valid no-passphrase SSH key to the root user ..."
    return 1
  fi
  if exec_remotely 'id'; then
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' already exists on $boxbuilder_host ..."
    # TODO: should verify admin group exists before returning    
    return 0
  fi
  if $_root_ssh_access_exists; then
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' does not exist, but root SSH access exists on $boxbuilder_host to automatically create boxbuilder_user $boxbuilder_user ..."
  else
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' does not exist, and no root SSH access on $boxbuilder_host; cannot automatically create boxbuilder_user $boxbuilder_user.  Create manually with valid SSH access or give SSH access to root ..."
    return 1
  fi
  echo "$_log_prefix  Ensuring 'admin' group exists ..."
  exec_remotely_quiet_root "groupadd -f admin"
  _admin_gid=$(exec_remotely_quiet_root "grep 'admin' /etc/group | cut -d: -f3")
  echo "$_log_prefix  Automatically creating '$boxbuilder_user' user ..."
  if exec_remotely_quiet_root "id $boxbuilder_user"; then
    echo "$_log_prefix  '$boxbuilder_user' user already exists, not re-adding ..."
  else
    exec_remotely_quiet_root "useradd $boxbuilder_user -m -g $_admin_gid"
  fi
  echo "$_log_prefix  Finding home dir for '$boxbuilder_user' user ..."
  _boxbuilder_user_home=$(exec_remotely_quiet_root "su - $boxbuilder_user -c 'echo \$HOME'")
  echo "$_log_prefix  Copying SSH authorized keys from root to '$boxbuilder_user' user's home dir with correct ownership ..."
  exec_remotely_quiet_root "mkdir -p '$_boxbuilder_user_home/.ssh/'"
  exec_remotely_quiet_root "cp '.ssh/authorized_keys' '$_boxbuilder_user_home/.ssh/'"
  exec_remotely_quiet_root "chown -R $boxbuilder_user '$_boxbuilder_user_home/.ssh'"
  if exec_remotely 'id'; then
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' successfully created on $boxbuilder_host ..."
  else
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' was NOT successfully created on $boxbuilder_host - something went wrong :( - try setting boxbuilder_debug=true ..."
    return 1
  fi
}

setup() {
  echo "$_log_prefix  Environment variable setup ..."
  if [ -e $HOME/.boxbuilder_remote_bootstraprc ]; then
    source $HOME/.boxbuilder_remote_bootstraprc
  fi
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_remote_bootstrap=boxbuilder_config_placeholder_from_boxbuilder_remote_bootstrap'}
  eval $boxbuilder_config
  boxbuilder_keypair=${boxbuilder_keypair:?"Please set 'boxbuilder_keypair' to the path of your ssh private key file"}
  boxbuilder_user=${boxbuilder_user:?"Please set 'boxbuilder_user' to the ssh user on the box being built"}
  boxbuilder_host=${boxbuilder_host:?"Please set 'boxbuilder_host' to the hostname or IP of the box being built"}
  boxbuilder_branch=${boxbuilder_branch:-"master"}
  boxbuilder_bootstrap_url=${boxbuilder_bootstrap_url:-"https://github.com/thewoolleyman/boxbuilder/raw/$boxbuilder_branch/boxbuilder_bootstrap"}

  echo "$_log_prefix  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

install_packages_remotely_redhat() {
  exec_remotely_quiet "sudo yum install -y wget"
}

install_packages_remotely_debian() {
  exec_remotely_quiet "sudo apt-get install -y wget"
}

install_packages_remotely() {
  install_packages_remotely_$_remote_platform
}

remote_bootstrap() {
  _boxbuilder_bootstrap_script=/tmp/${boxbuilder_bootstrap_url##*/} # grabs last path component of url to use as script name
  echo "$_log_prefix Downloading $boxbuilder_bootstrap_url to $_boxbuilder_bootstrap_script on $boxbuilder_host ..."
  exec_remotely "wget --no-check-certificate -O $_boxbuilder_bootstrap_script $boxbuilder_bootstrap_url"
  while exists=$(exec_remotely_quiet "if [[ -e $_boxbuilder_bootstrap_script ]] ; then echo exists; fi"); [[ "$exists" != "exists" ]]; do
    echo "$_log_prefix Waiting for wget --no-check-certificate to finish downloading $boxbuilder_bootstrap_url to $_boxbuilder_bootstrap_script on $boxbuilder_host ..."
    sleep 5
  done
  echo "$_log_prefix $boxbuilder_bootstrap_url successfully downloaded to $_boxbuilder_bootstrap_script on $boxbuilder_host ..."

  echo "$_log_prefix Changing permissions on $_boxbuilder_bootstrap_script on $boxbuilder_host ..."
  exec_remotely "chmod a+x $_boxbuilder_bootstrap_script"
  echo "$_log_prefix Running $_boxbuilder_bootstrap_script on $boxbuilder_host ..."
  exec_remotely_pseudo_tty "export boxbuilder_config='$boxbuilder_config' \
    && export boxbuilder_debug=$boxbuilder_debug \
    && $_boxbuilder_bootstrap_script"
}

run() {
  echo "$_log_prefix Starting ..."
  setup
  check_for_root_ssh_access
  ensure_boxbuilder_user_exists
  grant_nopasswd_sudo_access
  detect_platform_remotely
  install_packages_remotely
  remote_bootstrap
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
