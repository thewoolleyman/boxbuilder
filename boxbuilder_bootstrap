#!/usr/bin/env bash

#  https://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  # set -o verbose # Comment for now, makes debugging too hard, needs to default to false and have flag: http://www.pivotaltracker.com/story/show/5430700
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

detect_platform() {
  _uname=$(uname -a)
  if echo "$_uname" | grep -i 'debian'; then
    _platform='debian'
  elif echo "$_uname" | grep -i 'ubuntu'; then
    _platform='debian'
  elif [[ -f /etc/redhat-release ]]; then
    _platform='redhat'
  elif echo "$_uname" | grep -i 'darwin'; then
    # TODO: for now, darwin platform assumes you are using HomeBrew
    _platform='darwin'
  else
    echo "$_log_prefix error on line $LINENO - unable to determine supported platform from uname: '$_uname'"
    return 1
  fi
  echo "$_log_prefix  Platform detected as '$_platform'"
}

setup() {
  echo "$_log_prefix  Environment variable setup ..."
  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_bootstrap=boxbuilder_config_placeholder_from_boxbuilder_bootstrap'}
  eval $boxbuilder_config
  boxbuilder_user=$USER
  boxbuilder_host=$HOSTNAME
  boxbuilder_repo=${boxbuilder_repo:-"git://github.com/thewoolleyman/boxbuilder.git"}
  boxbuilder_branch=${boxbuilder_branch:-"master"}
  boxbuilder_remote=${boxbuilder_remote:-"origin"}
  boxbuilder_dir=${boxbuilder_dir:-"$HOME/.boxbuilder/"}

  echo "$_log_prefix  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

grant_nopasswd_sudo_access() {
  echo "$_log_prefix  Checking 'admin' group membership for user $boxbuilder_user on host $boxbuilder_host."
  if ! groups | grep -q -e 'admin'; then
    echo "$_log_prefix error on line $LINENO - user $boxbuilder_user is not a member of the 'admin' group on host $boxbuilder_host.  Please add..."
    return 1
  fi

  echo "$_log_prefix  Checking no-password and no requiretty sudo access for 'admin' group on host $boxbuilder_host and adding if necessary.  If prompted, please type your password, or ctrl-c to abort..."

  _needs_nopasswd_sudoers_added=false
  if ! sudo grep -e "%admin.*ALL.*=.*NOPASSWD.*:.*ALL" /etc/sudoers; then
    _needs_nopasswd_sudoers_added=true
  fi

  _needs_requiretty_sudoers_removed=false
  if sudo grep 'requiretty' /etc/sudoers; then
    _needs_requiretty_sudoers_removed=true
  fi

  if ! $_needs_nopasswd_sudoers_added && ! $_needs_requiretty_sudoers_removed; then
    echo "$_log_prefix  no sudoers changes needed ..."
    return 0
  fi

  sudo cp /etc/sudoers /etc/sudoers.bak

  _sudoers_additional_error_instructions='Please use visudo to manually make these changes: '
  if $_needs_requiretty_sudoers_removed; then
    sudo cat /etc/sudoers | grep -v 'requiretty' > /tmp/sudoers.new
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Remove 'requiretty' line. "
  else
    sudo cp /etc/sudoers /tmp/sudoers.new
  fi
  sudo chmod 0440 /tmp/sudoers.new

  if $_needs_nopasswd_sudoers_added; then
    echo "$_log_prefix  Giving user $boxbuilder_user NO PASSWORD sudo privileges"
    _new_sudoers_line="%admin ALL=NOPASSWD: ALL"
    sudo sh -c "echo \"$_new_sudoers_line\" >> /tmp/sudoers.new"
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Add a line '$_new_sudoers_line'. "
  fi

  if [[ ! -e /tmp/sudoers.new ]]; then
    echo "$_log_prefix error on line $LINENO - Could not add create /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi

  if ! sudo visudo -c -s -f /tmp/sudoers.new; then
    echo "$_log_prefix error on line $LINENO -: Syntax error in /tmp/sudoers.new on host $boxbuilder_host.  $_sudoers_additional_error_instructions"
    return 1
  fi
  sudo cp /tmp/sudoers.new /etc/sudoers
}

install_git_debian() {
  sudo apt-get install -y git-core
}

yum_setup() {
  rm -f /tmp/boxbuilder_epel.repo
  cat > /tmp/boxbuilder_epel.repo << here
[epel]
name=Extra Packages for Enterprise Linux 5 - \$basearch
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-5&arch=\$basearch
failovermethod=priority
enabled=1
here
sudo cp /tmp/boxbuilder_epel.repo /etc/yum.repos.d/boxbuilder_epel.repo

  rm -f /tmp/boxbuilder_rpmforge.repo
  cat > /tmp/boxbuilder_rpmforge.repo << here
[rpmforge]
name = Red Hat Enterprise \$releasever - RPMforge.net - dag
baseurl = http://apt.sw.be/redhat/el5/en/\$basearch/rpmforge
mirrorlist = http://apt.sw.be/redhat/el5/en/mirrors-rpmforge
enabled = 1
here
sudo cp /tmp/boxbuilder_rpmforge.repo /etc/yum.repos.d/boxbuilder_rpmforge.repo

  sudo sed -i".bak-$(date +%Y%m%d-%H%M)" -e 's/gpgcheck=1/gpgcheck=0/' /etc/yum.conf
}

install_git_redhat() {
  yum_setup
  sudo yum install -y git-core
}

install_git_darwin() {
  brew install git
}

install_git() {
  if git --help; then
    echo "$_log_prefix git is already installed, not reinstalling"
  else
    echo "$_log_prefix Installing git"
    install_git_$_platform
  fi
}

check_out_boxbuilder() {
  if [ -d $boxbuilder_dir ]; then
    echo "$_log_prefix Directory $boxbuilder_dir already exists.  Not cloning or overwriting..."
    echo "$_log_prefix Pulling latest $boxbuilder_remote/$boxbuilder_branch into existing $boxbuilder_dir"
    echo "cd $boxbuilder_dir && git pull $boxbuilder_remote $boxbuilder_branch"
    cd $boxbuilder_dir && git pull $boxbuilder_remote $boxbuilder_branch
  else
    echo "$_log_prefix Cloning $boxbuilder_branch branch from $boxbuilder_repo to directory $boxbuilder_dir ..."
    echo "$_log_prefix git clone -b $boxbuilder_branch $boxbuilder_repo $boxbuilder_dir"
    git clone -b $boxbuilder_branch $boxbuilder_repo $boxbuilder_dir
  fi
}

run_boxbuilder() {
  boxbuilder_script="$boxbuilder_dir"boxbuilder
  if [ ! -x $boxbuilder_script ]; then
    echo "$_log_prefix error on line $LINENO - No executable script found at $boxbuilder_script"
    return 1
  else
    echo "$_log_prefix Running boxbuilder script at $boxbuilder_script ..."
    source $boxbuilder_script
  fi
}

run() {
  echo "$_log_prefix Starting ..."
  setup
  detect_platform
  grant_nopasswd_sudo_access
  install_git
  check_out_boxbuilder
  run_boxbuilder
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
