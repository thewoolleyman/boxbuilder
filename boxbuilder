#!/usr/bin/env bash

#  https://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  # set -o verbose # Comment for now, makes debugging too hard, needs to default to false and have flag: http://www.pivotaltracker.com/story/show/5430700
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

setup_boxbuilderrc() {
  echo "$_log_prefix  Setting up $HOME/.boxbuilderrc ..."

  if [[ -e $HOME/.boxbuilderrc ]]; then
    boxbuilderrc_download_url=${boxbuilderrc_download_url:-""}
    echo "$_log_prefix $HOME/.boxbuilderrc already exists, not overwriting ..."
    if [[ ! -z $boxbuilderrc_download_url ]]; then
      if ! grep "$boxbuilderrc_download_url" $HOME/.boxbuilderrc; then
        echo "$_log_prefix Error - boxbuilderrc_download_url was specified as $boxbuilderrc_download_url , but that url is not found in the existing $HOME/.boxbuilderrc .  Either delete $HOME/.boxbuilderrc and allow it to be recreated, or do not set boxbuilderrc_download_url ..."
        return 1
      fi
    fi
  else
    boxbuilder_branch=${boxbuilder_branch:-"master"}
    boxbuilderrc_download_url=${boxbuilderrc_download_url:-"https://github.com/thewoolleyman/boxbuilder/raw/master/boxbuilderrc_download_example"}
    echo "$_log_prefix Creating $HOME/.boxbuilderrc which will source $HOME/.boxbuilderrc_download ..."
    _boxbuilderrc_contents=$( cat <<-LINES
# This boxbuilder config file was created automatically
# By default, it will download $boxbuilderrc_download_url
# to $HOME/.boxbuilderrc_download and source (execute) it.
# You can add custom settings to the bottom, or replace it entirely.

boxbuilderrc_download_url="$boxbuilderrc_download_url"
echo "Downloading AND overwriting $HOME/.boxbuilderrc_download from boxbuilderrc_download_url $boxbuilderrc_download_url"
wget --no-check-certificate -O $HOME/.boxbuilderrc_download $boxbuilderrc_download_url
echo "# WARNING: This file was automatically downloaded from $boxbuilderrc_download_url" >> $HOME/.boxbuilderrc_download
echo "# It will be overwritten the next time boxbuilder runs." >> $HOME/.boxbuilderrc_download
echo "# Put any local overrides at the bottom of $HOME/.boxbuilderrc ," >> $HOME/.boxbuilderrc_download
echo "# which is created by default to source (execute) this file." >> $HOME/.boxbuilderrc_download
echo "Sourcing (executing) $HOME/.boxbuilderrc_download"
source $HOME/.boxbuilderrc_download
LINES
)
    echo "$_boxbuilderrc_contents"
    echo "$_boxbuilderrc_contents" >> $HOME/.boxbuilderrc
    echo "$_log_prefix  Finished creating $HOME/.boxbuilderrc ..."
  fi
}

detect_platform() {
  _uname=$(uname -mprsv) # everything except nodename
  if echo "$_uname" | grep -i 'debian'; then
    _platform='debian'
  elif echo "$_uname" | grep -i 'ubuntu'; then
    _platform='debian'
  elif [[ -f /etc/redhat-release ]]; then
    _platform='redhat'
  elif echo "$_uname" | grep -i 'darwin'; then
    # TODO: for now, darwin platform assumes you are using HomeBrew
    _platform='darwin'
  else
    echo "$_log_prefix error on line $LINENO - unable to determine supported platform from uname: '$_uname'"
    return 1
  fi
  echo "$_log_prefix  Platform detected as '$_platform'"
}

setup() {
  echo "$_log_prefix  sourcing $HOME/.boxbuilderrc"
  source $HOME/.boxbuilderrc
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder=boxbuilder_config_placeholder_from_boxbuilder'}
  eval $boxbuilder_config
  boxbuilder_rvm_version=${boxbuilder_rvm_version:-}
  boxbuilder_default_ruby=${boxbuilder_default:-"1.8.7-p174"}
  boxbuilder_chef_repos=${boxbuilder_chef_repos:?"Please set 'boxbuilder_chef_repos' to a space-delimited list of Chef Git repositories"}
  boxbuilder_chef_dir=${boxbuilder_chef_dir:-"$HOME/.chef"}
  boxbuilder_chef_config_path=${boxbuilder_chef_config_path:?"Please set 'boxbuilder_chef_config_path' to the path of the Chef config file"}
  boxbuilder_chef_json_path=${boxbuilder_chef_json_path:?"Please set 'boxbuilder_chef_json_path' to the path of the Chef JSON attributes file"}
  boxbuilder_chef_gem_install_options=${boxbuilder_chef_gem_install_options:-"--no-ri --no-rdoc"}

  echo "$_log_prefix  Environment variables:"
  echo "boxbuilder_config                    = $boxbuilder_config"
  echo "boxbuilder_default_ruby              = $boxbuilder_default_ruby"
  echo "boxbuilder_chef_repos                = $boxbuilder_chef_repos"
  echo "boxbuilder_chef_dir                  = $boxbuilder_chef_dir"
  echo "boxbuilder_chef_config_path          = $boxbuilder_chef_config_path"
  echo "boxbuilder_chef_json_path            = $boxbuilder_chef_json_path"
  echo "boxbuilder_chef_gem_install_options  = $boxbuilder_chef_gem_install_options"
  if [[ -n $boxbuilder_rvm_version ]]; then
    echo "boxbuilder_rvm_version               = $boxbuilder_rvm_version"
  else
    echo "boxbuilder_rvm_version               = undefined, will use default"
  fi

}

prerequisite_packages_redhat() {
  # This is the list taken directly from http://support.rightscale.com/index.php?title=06-FAQs/FAQ_0103_-_How_do_I_make_any_Amazon_Machine_Image_(AMI)_capable_of_running_RightScripts%3F
  # echo "wget --no-check-certificate mlocate nano logrotate ruby ruby-devel ruby-docs ruby-irb ruby-libs ruby-mode ruby-rdoc ruby-ri ruby-tcltk syslog-ng postfix openssl openssh openssh-askpass openssh-clients openssh-server curl gcc* zip unzip bison flex compat-libstdc++-296 cvs subversion autoconf automake libtool compat-gcc-34-g77 mutt sysstat rpm-build fping vim-common vim-enhanced rrdtool-1.2.27 rrdtool-devel-1.2.27 rrdtool-doc-1.2.27 rrdtool-perl-1.2.27 rrdtool-python-1.2.27 rrdtool-ruby-1.2.27 rrdtool-tcl-1.2.27 pkgconfig lynx screen yum-utils bwm-ng createrepo redhat-rpm-config redhat-lsb rsync java"

  # This is the list from local_bootstrap.sh
  # echo "yum install git readline-devel readline bison file gcc gettext-devel expat-devel curl-devel libzip-devel openssl-devel openssl"

  echo "make gcc autoconf automake zlib-devel openssl-devel readline-devel bison libxml2-devel git curl bzip2 openssh openssh-askpass openssh-clients openssh-server"
}

package_status_check_redhat() {
  disable_error_checking
  # TODO: refactor into conditional with command so we don't have to disable error checking
  _package_status=$(rpm -qa --queryformat="%{NAME}\n" | grep -iE "^$_package_name\$" | grep "$_package_version")
  enable_error_checking
  echo $_package_status
}

install_package_redhat() {
  if grep 'gpgcheck=1' /etc/yum.conf; then
    sudo sed -i'.bak' -e 's/gpgcheck=1/gpgcheck=0/' /etc/yum.conf
  fi
  echo "$_log_prefix  Installing package: $_package"
  sudo yum install -y $_package
}

prerequisite_packages_debian() {
  # TODO: specify exact package versions
  echo "build-essential zlib1g zlib1g-dev libssl-dev openssl libreadline5-dev bison libxml2-dev git-core autoconf curl"
}

package_status_check_debian() {
  disable_error_checking
  # TODO: refactor into conditional with command so we don't have to disable error checking
  # TODO: better regexp like centos, so we don't accidentally match on packages with substring match - e.g. bzip2 vs. bzip2-libs on centos
  _package_status=$(dpkg -l $_package_name | grep "ii  $_package_name" | grep "$_package_version")
  enable_error_checking
  echo $_package_status
}

install_package_debian() {
  export DEBIAN_FRONTEND=noninteractive  # Make Debian never prompt for user input on packages ...
  if [[ $_package_manager_updated = false ]]; then
    echo "$_log_prefix  Updating Aptitude..."
    sudo apt-get update
    _package_manager_updated=true
  fi
  echo "$_log_prefix  Installing package: $_package"
  sudo apt-get install -y $_package
}

prerequisite_packages_darwin() {
  # TODO: specify exact package versions
  # TODO: finalize complete list for homebrew
  echo "readline libxml2 git"
}

package_status_check_darwin() {
  disable_error_checking
  _package_status=$(brew list $_package_name | grep -viE '^Error' | grep $_package_name/$_package_version)
  enable_error_checking
  echo $_package_status
}

install_package_darwin() {
  if [[ $_package_manager_updated = false ]]; then
    echo "$_log_prefix  Updating Homebrew..."
    brew update
    _package_manager_updated=true
  fi
  echo "$_log_prefix  Installing package: $_package"
  brew install $_package
}


install_packages() {
  echo "$_log_prefix  Installing prerequisite packages for RVM/Ruby..."

  boxbuilder_prerequisite_packages=${boxbuilder_prerequisite_packages:-$(prerequisite_packages_$_platform)}
  echo "$_log_prefix  boxbuilder_prerequisite_packages='$boxbuilder_prerequisite_packages'"

  _package_manager_updated=false
  for _package in $boxbuilder_prerequisite_packages
  do
    _package_name=${_package%=*}
    if echo $_package | grep '='; then
      _package_version=${_package#*=}
    else
      _package_version=''
    fi

    _package_status=$(package_status_check_$_platform)

    if [[ -z $_package_status ]]; then
      echo "$_log_prefix  Package $_package IS NOT already installed, installing it..."
      install_package_$_platform
    else
      echo "$_log_prefix  Package $_package IS already installed..."
    fi
  done
  echo "$_log_prefix  Finished installing packages..."
}

install_rvm() {
  boxbuilder_rvm_version=${boxbuilder_rvm_version:-$(curl -s http://rvm.beginrescueend.com/releases/stable-version.txt)}
  echo "$_log_prefix  Installing RVM version $boxbuilder_rvm_version ..."
  echo "$_log_prefix  Reloading default RVM interpreter in this shell, if it is installed"
  if [[ -s $HOME/.rvm/environments/default ]]; then
    source $HOME/.rvm/environments/default
  fi
  if [[ -s $HOME/.rvm/scripts/rvm && ! -z $($HOME/.rvm/bin/rvm --version | grep $boxbuilder_rvm_version) ]]; then
    echo "$_log_prefix  Not reinstalling RVM version $boxbuilder_rvm_version because it is already installed ..."
  else
    mkdir -p $HOME/.rvm/src/
    rm -rf $HOME/.rvm/src/rvm/
    git clone --depth 1 git://github.com/wayneeseguin/rvm.git $HOME/.rvm/src/rvm
    disable_error_checking # HACK - Latest stable RVM install is returning nonzero but no output.  Add ability to specify known good RVM version/tag.    
    $HOME/.rvm/src/rvm/install
    enable_error_checking

    # HACK around bug in RVM latest-stable
    mkdir -p $HOME/.rvm/gems/cache
    # END HACK

    echo "$_log_prefix  Finished installing RVM version $boxbuilder_rvm_version ..."
  fi
}

enable_rvm() {
  echo "$_log_prefix  Enabling RVM in init file $init_file"
  rvm_init="if [[ -s $HOME/.rvm/scripts/rvm ]] ; then source $HOME/.rvm/scripts/rvm ; fi"
  if [[ -z $(grep '.rvm' $init_file) ]] ; then
    echo $rvm_init >> $init_file
    echo "$_log_prefix  Added RVM line to $init_file"
  else
    echo "$_log_prefix  Not adding RVM line to $init_file because it already exists ..."
  fi
  if [[ ! -z $(grep -e '.*&& return.*$' $init_file) ]] ; then
    # mount proc to avoid error message from sed: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=559539
    # sudo mount -t proc none /proc/  # comment for now, fails if proc already mounted
    sed -i'.bak' -e 's/^.*&& return.*$//' $init_file
    echo "$_log_prefix  Removed '&& return' from $init_file"
  else
    echo "$_log_prefix  Not removing '&& return' from $init_file because it was not found ..."
  fi
  echo "$_log_prefix  Finished enabling RVM in init file $init_file"
}

install_rvm_ruby() {
  echo "$_log_prefix  Installing RVM default ruby: $boxbuilder_default_ruby"
  _rvm_info_output=$($HOME/.rvm/bin/rvm info)
  _rvm_info_output_first_line=$(echo "$_rvm_info_output" | head -n 1)
  if echo "$_rvm_info_output_first_line" | grep "$boxbuilder_default_ruby"; then
    echo "$_log_prefix  Not installing RVM Ruby $boxbuilder_default_ruby because it is already installed ..."
  else
    $HOME/.rvm/bin/rvm install "$boxbuilder_default_ruby"
    if [[ ! $? = 0 ]]; then # TODO: remove, unnecessary since error checking is not enabled
      echo "$_log_prefix  Error installing RVM default ruby"
      return 1
    fi
    echo "$_log_prefix  Finished installing RVM default ruby: $boxbuilder_default_ruby"
  fi
}

set_rvm_default_ruby() {
  echo "$_log_prefix  Setting RVM default ruby: $boxbuilder_default_ruby"
  $HOME/.rvm/bin/rvm --default use $boxbuilder_default_ruby
  if [[ ! $? = 0 ]]; then # TODO: remove, unnecessary since error checking is not enabled
    # TODO: This manual check is only required because RVM can't be invoked without
    # disable_error_checking.  See http://www.pivotaltracker.com/story/show/5021131
    echo "$_log_prefix  Error setting RVM default ruby"
    return 1
  fi
  echo "$_log_prefix  Finished setting RVM default ruby: $boxbuilder_default_ruby"
}

setup_rvm() {
  echo "$_log_prefix  Setting up RVM..."
  install_rvm
  for init_file in $HOME/.bashrc $HOME/.bash_profile
  do
    if [[ -e $init_file ]] ; then
      disable_error_checking  # turn off return code checking for now, failing with output 'tput: unknown terminal "unknown"'
      enable_rvm
      enable_error_checking
    fi
  done
  install_rvm_ruby
  set_rvm_default_ruby
  echo "$_log_prefix  Reloading default RVM interpreter in this shell"
  source $HOME/.rvm/environments/default
  echo "$_log_prefix  Finished setting up RVM..."
}

install_chef() {
  echo "$_log_prefix  Installing Chef..."
  # TODO: Allow override if user wants to force reinstall with different boxbuilder_chef_gem_install_options
  # TODO: Split out specific var for user to override chef version, so it can be used for installed check
  if ! gem search -i '^chef$'; then
    gem install chef $boxbuilder_chef_gem_install_options
    echo "$_log_prefix  Finished installing Chef..."
  else
    echo "$_log_prefix  'chef' gem is already installed, not reinstalling..."
  fi
}

download_chef_repos() {
  echo "$_log_prefix  Downloading/updating Chef Repos..."
  if [ ! -e $boxbuilder_chef_dir ]; then
    mkdir -p $boxbuilder_chef_dir
  fi
  # TODO: handle branches, probably optionally comma delimited after repo URL
  for _boxbuilder_chef_repo in $boxbuilder_chef_repos
  do
    _name_dot_git=${_boxbuilder_chef_repo##*/}
    _repo_path="$boxbuilder_chef_dir/${_name_dot_git%.*}"
    if [ ! -e $_repo_path ]; then
      echo "$_log_prefix  $_repo_path does not exist, cloning from $_boxbuilder_chef_repo ..."
      git clone --recursive -- $_boxbuilder_chef_repo $_repo_path
    else
      echo "$_log_prefix  $_repo_path already exists, pulling and updating ..."
      echo $_repo_path
      set +o nounset
      cd $_repo_path
      set -o nounset
      git pull
      git submodule update --init
      set +o nounset
      cd -
      set -o nounset
    fi
  done
  echo "$_log_prefix  Finished downloading/updating Chef Repos..."
}

create_chef_script() {
  echo "$_log_prefix  Creating Chef script..."
  # TODO: create timestamped chef script, for reproducibility
  echo "$_log_prefix  Finished Creating Chef Script..."
}

run_chef() {
  echo "$_log_prefix  Running Chef Solo command: rvmsudo \"bash -c '$boxbuilder_config && chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path'\""
  rvmsudo "bash -c '$boxbuilder_config && chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path'"
  echo "$_log_prefix  Finished running Chef Solo command: rvmsudo \"bash -c '$boxbuilder_config && chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path'\""
}

run() {
  echo "$_log_prefix Starting ..."
  setup_boxbuilderrc
  detect_platform
  setup
  install_packages
  setup_boxbuilderrc
  setup_rvm
  install_chef
  download_chef_repos
  create_chef_script
  run_chef
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
