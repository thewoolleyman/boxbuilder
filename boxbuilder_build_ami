#!/usr/bin/env bash

#  https://github.comthewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  # set -o verbose # Comment for now, makes debugging too hard, needs to default to false and have flag: http://www.pivotaltracker.com/story/show/5430700
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

detect_platform() {
  _uname=$(uname -a)
  if echo "$_uname" | grep -i 'debian'; then
    _platform='debian'
  elif echo "$_uname" | grep -i 'ubuntu'; then
    _platform='debian'
  elif [[ -f /etc/redhat-release ]]; then
    _platform='redhat'
  elif echo "$_uname" | grep -i 'darwin'; then
    # TODO: for now, darwin platform assumes you are using HomeBrew
    _platform='darwin'
  else
    echo "$_log_prefix error on line $LINENO - unable to determine supported platform from uname: '$_uname'"
    return 1
  fi
  echo "$_log_prefix  Platform detected as '$_platform'"
}

setup_image_vars_redhat() {
  if [[ $_arch = "x86_64" ]] ; then
    # _ebsopts="--kernel=aki-2a42a043 --ramdisk=ari-2c42a045 --block-device-mapping /dev/sdb=ephemeral0" # defaults for ami-4d42a924
    _ebsopts="--kernel=aki-b51cf9dc --ramdisk=ari-b31cf9da --block-device-mapping /dev/sdb=ephemeral0" # defaults for ami-1402f77d
  else
    _ebsopts="--kernel=aki-9b00e5f2 --ramdisk=ari-a51cf9cc --block-device-mapping /dev/sda2=ephemeral0"
  fi

  _release="5.4"
  _standard_ami_prefix="redhat-$_release-$_arch"
  _standard_ami_description="redhat $_release $_arch"
  _imagesource="http://mirrors.usc.edu/pub/linux/distributions/centos/$_release/os/$_arch/images/stage2.img"
  _image="/mnt/stage2.img"
  _image_fs_type="squashfs"
  _imagedir="/mnt/stage2"
}

setup_image_vars_debian() {
  if [[ $_arch = "x86_64" ]] ; then
    _ubuntu_arch=amd64
    _ebsopts="--kernel=aki-0b4aa462 --ramdisk=ari-c515f6ac --block-device-mapping /dev/sdb=ephemeral0"
  else
    _ubuntu_arch=i386
    _ebsopts="--kernel=aki-754aa41c --ramdisk=ari-0915f660  --block-device-mapping /dev/sda2=ephemeral0"
  fi

  _codename="lucid"
  _release="10.04"
  _tag="server"

  _standard_ami_prefix="ubuntu-$_release-$_codename-$_tag-$_arch"
  _standard_ami_description="Ubuntu $_release $_codename $_tag $_arch"
  _imagesource="http://uec-images.ubuntu.com/releases/$_codename/release/unpacked/ubuntu-$_release-$_tag-uec-$_ubuntu_arch.img.tar.gz"
  _image="/mnt/$_codename-$_tag-uec-$_ubuntu_arch.img"
  _image_fs_type="ext3"
  _imagedir="/mnt/$_codename-uec-$_ubuntu_arch"
}

setup_image_vars() {
  echo "$_log_prefix  Image variable setup for platform $_platform..."

  # TODO: Make sure these kernel and ramdisk values are correct for all platforms
  if [[ $(uname -m) = "x86_64" ]] ; then
    _arch=x86_64
  else
    _arch=i386
  fi

  setup_image_vars_$_platform

  echo "$_log_prefix  Finished image variable setup for platform $_platform:"
  echo "_standard_ami_prefix=$_standard_ami_prefix"
  echo "_standard_ami_description=$_standard_ami_description"
  echo "_imagesource=$_imagesource"
  echo "_image=$_image"
  echo "_imagedir=$_imagedir"
}

setup() {
  echo "$_log_prefix  Environment variable setup ..."
  if [ -e $HOME/.boxbuilder_build_amirc ]; then
    source $HOME/.boxbuilder_build_amirc
  fi
  
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_build_ami=boxbuilder_config_placeholder_from_boxbuilder_build_ami'}
  eval $boxbuilder_config
  boxbuilder_branch=${boxbuilder_branch:-"master"}
  boxbuilder_bootstrap_url=${boxbuilder_bootstrap_url:-"https://github.comthewoolleyman/boxbuilder/raw/$boxbuilder_branch/boxbuilder_bootstrap"}
  boxbuilder_user=${boxbuilder_user:-"$USER"}
  boxbuilder_ami_prefix=${boxbuilder_ami_prefix:-"built-by-boxbuilder"}
  boxbuilder_ec2_api_tools_url=${boxbuilder_ec2_api_tools_url:-"http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip"}

  EC2_CERT=${EC2_CERT:-""}
  EC2_PRIVATE_KEY=${EC2_PRIVATE_KEY:-""}
  
  setup_image_vars

  export PATH=/usr/sbin:/sbin:$PATH

  echo "$_log_prefix  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

set_ec2_credentials() {
  echo "$_log_prefix Setting EC2 credentials ..."
  
  if [[ -z $EC2_CERT ]]; then
    EC2_CERT=( $HOME/.ec2/cert-*.pem ) # grab first file using bash array
    echo "$_log_prefix EC2_CERT is not set, loading from $HOME/.ec2/cert-*.pem ..."
  fi

  if [[ ! -e $EC2_CERT ]]; then
    echo "$_log_prefix ERROR: EC2_CERT was not found at $EC2_CERT, exiting ..."
    return 1
  fi

  if [[ -z $EC2_PRIVATE_KEY ]]; then
    EC2_PRIVATE_KEY=( $HOME/.ec2/pk-*.pem ) # grab first file using bash array
    echo "$_log_prefix EC2_PRIVATE_KEY is not set, loading from $HOME/.ec2/pk-*.pem ..."
  fi

  if [[ ! -e $EC2_PRIVATE_KEY ]]; then
    echo "$_log_prefix ERROR: EC2_PRIVATE_KEY was not found at $EC2_PRIVATE_KEY, exiting ..."
    return 1
  fi

  export EC2_CERT
  export EC2_PRIVATE_KEY

  echo "$_log_prefix Finished setting EC2 credentials.  Using EC2_CERT=$EC2_CERT and EC2_PRIVATE_KEY=$EC2_PRIVATE_KEY ..."
}

#install_ec2_tools() {
#  echo "$_log_prefix Installing ec2 tools ..."
#  echo "$_log_prefix Ensuring that multiverse is added to /etc/apt/sources.list so ec2 packages can be installed ..."
#  sudo sed -i".bak-$(date +%Y%m%d-%H%M)" -e 's/universe$/universe multiverse/' /etc/apt/sources.list
#  echo "$_log_prefix Updating apt and installing EC2 tools ..."
#  sudo apt-get update
#  sudo -E apt-get install -y ec2-api-tools ec2-ami-tools
#  echo "$_log_prefix Finished installing ec2 tools ..."
#}

install_packages_redhat() {
  sudo yum install -y unzip java shadow-utils
  export JAVA_HOME="/usr/lib/jvm/jre"
}

install_packages_debian() {
  sudo -E apt-get install -y unzip default-jre-headless
  export JAVA_HOME="/usr/lib/jvm/default-java"
}

install_packages() {
  install_packages_$_platform
}

set_up_ec2_tools() {
  echo "$_log_prefix Setting up EC2 tools ..."

  _ec2_tools_path=$HOME/.boxbuilder_ec2_tools
  _ec2_api_tools_path=$_ec2_tools_path/ec2-api-tools
  if [[ -x $_ec2_api_tools_path/bin/ec2-run-instances ]]; then
    echo "$_log_prefix EC2 API Tools already exist at $_ec2_api_tools_path.  Not re-downloading ..."
  else
    mkdir -p $_ec2_tools_path
    if [[ ! $(which unzip) ]]; then
      echo "$_log_prefix ERROR: 'unzip' executable not available.  It is required to unzip auto-downloaded EC2 API Tools. Either put unzip with on your path, or manually unzip the EC2 API Tools to $_ec2_api_tools_path ..."
      return 1
    fi
    _ec2_api_tools_zipfile=$_ec2_tools_path/${boxbuilder_ec2_api_tools_url##*/} # grabs last path component of url to use as zipfile name
    echo "$_log_prefix EC2 API Tools do not exist at $_ec2_api_tools_path.  Downloading from $boxbuilder_ec2_api_tools_url to $_ec2_api_tools_path ..."
    wget -O $_ec2_api_tools_zipfile $boxbuilder_ec2_api_tools_url
    echo "$_log_prefix Reading top-level directory for $_ec2_api_tools_zipfile ..."
    # Zipfile is structured with top-level directory containing the release date, so we must determine what it is, extract, and symlink it to _ec2_api_tools_path
    disable_error_checking
    _first_zipfile_listing_entry=$(unzip -l $_ec2_api_tools_zipfile | head -n4 | tail -n1) # _first_zipfile_listing_entry should be top-level zipfile dir
    enable_error_checking
    _top_level_zipfile_dir=${_first_zipfile_listing_entry##* } # grab just last space-delimited directory component from _first_zipfile_listing_entry
    _top_level_zipfile_dir=${_top_level_zipfile_dir%%/} # strip trailing slash
    echo "$_log_prefix Unzipping $_ec2_api_tools_zipfile to $_ec2_tools_path ..."
    unzip -o -d $_ec2_tools_path $_ec2_api_tools_zipfile # Unzip to $HOME/.boxbuilder_ec2_tools
    echo "$_log_prefix Symlinking $_ec2_tools_path/$_top_level_zipfile_dir to $_ec2_api_tools_path ..."
    ln -sf $_ec2_tools_path/$_top_level_zipfile_dir $_ec2_api_tools_path # symlink to simple directory name without release date.
  fi
  export EC2_HOME=$_ec2_api_tools_path
  export PATH=$EC2_HOME/bin:$PATH
  echo "$_log_prefix Finished setting up EC2 tools ..."
}

create_chroot_jail_from_base_image() {
  echo "$_log_prefix Creating chroot jail from base image $_imagesource ..."
  if [[ -e $_image ]]; then
    echo "$_log_prefix Image $_image already exists.  Not downloading again ..."
  else
    if [[ "$_imagesource" = *.img ]]; then
      echo "$_log_prefix Downloading image from $_imagesource ..."
      sudo wget --progress=dot:mega -O $_image $_imagesource
    else
      echo "$_log_prefix Downloading image from $_imagesource and unzipping to $_image ..."
      wget --progress=dot:mega -O- $_imagesource | sudo tar xzf - -C /mnt
    fi
  fi

  if which uec-resize-image; then
    # Only available on Ubuntu, but only needed on Ubuntu
    echo "$_log_prefix Resizing $_image to 5G ..."
    # Resize image so we have enough space to install in chroot
    # Not sure if one or both of uec-resize-image and resize2fs are needed
    sudo uec-resize-image $_image 5G
  fi

  # Ensure existing loop device is unmounted (allows script to be run multiple times)
  _loopback_device=${_loopback_device:-'loop5'}
  echo "$_log_prefix Ensuring existing loop device at /dev/$_loopback_device is unmounted ..."
  _mounts="$(mount)"
  if echo "$_mounts" | grep "/dev/$_loopback_device"; then
    _mount=$(echo "$_mounts" | grep "/dev/$_loopback_device")
    echo "$_log_prefix Error - loopback device /dev/$_loopback_device already mounted. Will attempt to reuse existing mount.  If there are problems, reboot.  If there are still problems, you can try setting _loopback_device to a different value.  Existing loopback mount: $_mount"
    return 0
    # TODO: This never worked.  Always got "bad magic number" error when trying to reuse previously-used loopback
    # _mount=$(echo "$_mounts" | grep "/dev/$_loopback_device")
    # _loop_mount=$(echo "$_mount" | cut -d ' ' -f 3)
    # sudo umount -dfl $_loop_mount
    # sudo losetup -d /dev/$_loopback_device
    # sudo rm /dev/$_loopback_device
    # sudo MAKEDEV /dev/$_loopback_device
  fi 

  if [[ $_platform = 'redhat' ]]; then
    _image_fs_type='squashfs'
  else
    _image_fs_type='' # default
  fi
  
  echo "$_log_prefix Mounting loop device at /dev/$_loopback_device ..."
  if [[ $_image_fs_type = 'squashfs' ]]; then
    # squashfs is readonly, mount and then copy so chroot will be writeable
    sudo mkdir -p $_imagedir-mount
    sudo mount -o loop=/dev/$_loopback_device -t $_image_fs_type $_image $_imagedir-mount
    sudo cp -rp $_imagedir-mount $_imagedir
  else
    sudo mkdir -p $_imagedir
    sudo mount -o loop=/dev/$_loopback_device $_image $_imagedir
  fi

  if which resize2fs; then
    echo "$_log_prefix Resizing loop device at /dev/$_loopback_device to 5G ..."
    # Sometimes this is needed even though image was resized before mount with uec-resize-image?
    if sudo resize2fs /dev/$_loopback_device 5G; then
      echo "$_log_prefix Resize succeeded ..."
    else
      # Just ignore it, it only seems to fail on centos which doesn't need it
      # probably doesn't work on squashfs
      echo "$_log_prefix Resize failed ..."
    fi
  fi

  echo "$_log_prefix Finished creating chroot jail from base image $_imagesource ..."
}

perform_initial_chroot_jail_setup() {
  echo "$_log_prefix Performing initial setup on chroot jail at $_imagedir ..."

  sudo /usr/sbin/chroot $_imagedir mount -t proc none /proc
  
  sudo mkdir -p $_imagedir/dev/pts
  sudo /usr/sbin/chroot $_imagedir mount -t devpts none /dev/pts
  
  sudo mkdir -p $_imagedir/etc

  sudo cp /etc/resolv.conf $_imagedir/etc/
  # Add Google's public DNS servers
  sudo bash -c "echo 'nameserver 8.8.8.8' >> $_imagedir/etc/resolv.conf"
  sudo bash -c "echo 'nameserver 8.8.4.4' >> $_imagedir/etc/resolv.conf"

  if [[ $_platform = 'redhat' ]]; then

    echo "$_log_prefix  Making devices in in chroot jail..."
    for _device in console null zero; do
      sudo /sbin/MAKEDEV -d $_imagedir/dev -x $_device
    done
    
    sudo touch $_imagedir/etc/mtab
    echo "127.0.0.1		localhost 	localhost.localdomain" > /tmp/hosts
    sudo cp /tmp/hosts $_imagedir/etc/hosts
    
    _etc_yumreposd_centos_base=$( cat <<-LINES
# CentOS-Base.repo
#
# The mirror system uses the connecting IP address of the client and the
# update status of each mirror to pick mirrors that are updated to and
# geographically close to the client.  You should use this for CentOS updates
# unless you are manually picking other mirrors.
#
# If the mirrorlist= does not work for you, as a fall back you can try the 
# remarked out baseurl= line instead.
#
#

[base]
name=CentOS-5.5 - Base
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=os
#baseurl=http://mirror.centos.org/centos/5.5/os/x86_64/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

#released updates 
[updates]
name=CentOS-5.5 - Updates
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=updates
#baseurl=http://mirror.centos.org/centos/5.5/updates/x86_64/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

#packages used/produced in the build but not released
[addons]
name=CentOS-5.5 - Addons
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=addons
#baseurl=http://mirror.centos.org/centos/5.5/addons/x86_64/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

#additional packages that may be useful
[extras]
name=CentOS-5.5 - Extras
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=extras
#baseurl=http://mirror.centos.org/centos/5.5/extras/x86_64/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-5.5 - Plus
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=centosplus
#baseurl=http://mirror.centos.org/centos/5.5/centosplus/x86_64/
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

#contrib - packages by Centos Users
[contrib]
name=CentOS-5.5 - Contrib
mirrorlist=http://mirrorlist.centos.org/?release=5.5&arch=x86_64&repo=contrib
#baseurl=http://mirror.centos.org/centos/5.5/contrib/x86_64/
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5
LINES
)

    echo "$_etc_yumreposd_centos_base"
    sudo mkdir -p $_imagedir/etc/yum.repos.d
    sudo bash -c "echo \"$_etc_yumreposd_centos_base\" >> $_imagedir/etc/yum.repos.d/Centos-Base.repo"

    echo "$_log_prefix  Installing base packages in chroot jail..."
    sudo yum -y --installroot="$_imagedir" groupinstall Base

    echo "$_log_prefix  Installing base packages in chroot jail..."
    sudo yum -y --installroot="$_imagedir" install openssh-server

    _etc_fstab_contents=$( cat <<-LINES
/dev/sda1  /         ext3    defaults        1 1
none       /dev/pts  devpts  gid=5,mode=620  0 0
none       /dev/shm  tmpfs   defaults        0 0
none       /proc     proc    defaults        0 0
none       /sys      sysfs   defaults        0 0
/dev/sdc1  /mnt      ext3    defaults        0 0
/dev/sdc2  swap      swap    defaults        0 0
LINES
)
    echo "$_etc_fstab_contents"
    sudo bash -c "echo \"$_etc_fstab_contents\" >> $_imagedir/etc/fstab"

    _sysconfig_network_contents=$( cat <<-LINES
HOSTNAME=localhost.localdomain
NETWORKING=yes
NOZEROCONF=true
NETWORKING_IPV6=no
LINES
)
    echo "$_sysconfig_network_contents"
    sudo bash -c "echo \"$_sysconfig_network_contents\" >> $_imagedir/etc/sysconfig/network"

    _sysconfig_network_scripts_ifcfg_eth0_contents=$( cat <<-LINES
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
PERSISTENT_DHCLIENT=yes
LINES
)
    echo "$_sysconfig_network_scripts_ifcfg_eth0_contents"
    sudo bash -c "echo \"$_sysconfig_network_scripts_ifcfg_eth0_contents\" >> $_imagedir/etc/sysconfig/network-scripts/ifcfg-eth0"

    _ssh_sshd_config_contents=$( cat <<-LINES
Port 22
Protocol 2
SyslogFacility AUTHPRIV

PermitRootLogin yes
MaxAuthTries 4
#PasswordAuthentication no
ChallengeResponseAuthentication no

GSSAPIAuthentication yes
GSSAPICleanupCredentials yes
UsePAM yes

AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
AcceptEnv LC_IDENTIFICATION LC_ALL
X11Forwarding yes

LINES
)

    boxbuilder_ami_no_password_ssh_debug_access=${boxbuilder_ami_no_password_ssh_debug_access:-false}
    if [[ $boxbuilder_ami_no_password_ssh_debug_access = true ]]; then

      _no_password_sshd_config_contents=$( cat <<-LINES

# HACK allow empty password auth to debug key based ssh auth problems
PermitRootLogin without-password
PasswordAuthentication yes
PermitEmptyPasswords yes
# END HACK

LINES
)
      _ssh_sshd_config_contents="$_ssh_sshd_config_contents $_no_password_sshd_config_contents"
    fi

    echo "$_ssh_sshd_config_contents"
    
    sudo mkdir -p $_imagedir/etc/ssh
    sudo bash -c "echo \"$_ssh_sshd_config_contents\" >> $_imagedir/etc/ssh/sshd_config"

    # restart networking in chroot to create /etc/resolv.conf (and other required stuff?)
    sudo /usr/sbin/chroot $_imagedir /etc/init.d/network restart

    # ensure /etc/shadow exist
    sudo /usr/sbin/chroot $_imagedir /usr/sbin/pwconv
    sudo /usr/sbin/chroot $_imagedir authconfig --enableshadow --useshadow --enablemd5 --updateall

    # _kernel_module_archive_url=${_kernel_module_archive_url:-"http://s3.amazonaws.com/ec2-downloads/ec2-modules-2.6.18-xenU-ec2-v1.4-x86_64.tgz"} # for old rightscale builder ami
    _kernel_module_archive_url=${_kernel_module_archive_url:-"http://s3.amazonaws.com/ec2-downloads/ec2-modules-2.6.21.7-2.fc8xen-ec2-v1.0-x86_64.tgz"} # matches aki-b51cf9dc
    _kernel_module_archive=/lib/modules/${_kernel_module_archive_url##*/} # grabs last path component of url to use as script name
    sudo /usr/sbin/chroot $_imagedir wget -O $_kernel_module_archive $_kernel_module_archive_url
    sudo /usr/sbin/chroot $_imagedir tar -zxf $_kernel_module_archive
  fi
}

ensure_boxbuilder_user_exists() {
  echo "$_log_prefix  Ensuring boxbuilder_user '$boxbuilder_user' exists in chroot jail ..."
  if [[ $boxbuilder_user = 'root' ]]; then
    echo "$_log_prefix  boxbuilder_user cannot be root.  Please set \
boxbuilder_user to a non-root user.  If it does not exist, it will be \
automatically created..."
    return 1
  fi
  if sudo grep -e "^$boxbuilder_user:" $_imagedir/etc/shadow; then
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' already exists in chroot jail ..."
    return 0
  fi
  echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' does not exist, automatically creating it ..."

  echo "$_log_prefix  Ensuring 'admin' group exists ..."
  sudo /usr/sbin/chroot $_imagedir /usr/sbin/groupadd -f admin
  _admin_gid=$(sudo /usr/sbin/chroot $_imagedir grep 'admin' /etc/group | cut -d: -f3)
  echo "$_log_prefix  Automatically creating '$boxbuilder_user' user ..."
  sudo /usr/sbin/chroot $_imagedir /usr/sbin/useradd $boxbuilder_user -m -g $_admin_gid
  echo "$_log_prefix  Finding home dir for '$boxbuilder_user' user ..."
  _boxbuilder_user_home=$(sudo /usr/sbin/chroot $_imagedir su - $boxbuilder_user -c "echo $HOME")
  if sudo /usr/sbin/chroot $_imagedir su - $boxbuilder_user -c 'id'; then
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' successfully created in chroot jail..."
  else
    echo "$_log_prefix  boxbuilder_user '$boxbuilder_user' was NOT successfully created in chroot jail - something went wrong :( - try setting boxbuilder_debug=true ..."
    return 1
  fi

  if [[ $boxbuilder_ami_no_password_ssh_debug_access = true ]]; then
    # centos wants /mnt/sysimage/etc to exist, or else 'passwd -d' gives 'Error 206'...
    sudo /usr/sbin/chroot $_imagedir mkdir -p /mnt/sysimage 
    sudo /usr/sbin/chroot $_imagedir ln -s /etc /mnt/sysimage/etc 
    # allow empty password auth to debug key based ssh auth problems
    sudo /usr/sbin/chroot $_imagedir passwd -d $boxbuilder_user
  fi
}

grant_nopasswd_sudo_access_in_chroot() {
  echo "$_log_prefix  Checking no-password and no requiretty sudo access for 'admin' group in chroot jail and adding if necessary.  If prompted, please type your password, or ctrl-c to abort..."

  _needs_nopasswd_sudoers_added=false
  if ! sudo grep -e "%admin.*ALL.*=.*NOPASSWD.*:.*ALL" $_imagedir/etc/sudoers; then
    _needs_nopasswd_sudoers_added=true
  fi

  _needs_requiretty_sudoers_removed=false
  if sudo grep 'requiretty' $_imagedir/etc/sudoers; then
    _needs_requiretty_sudoers_removed=true
  fi

  if ! $_needs_nopasswd_sudoers_added && ! $_needs_requiretty_sudoers_removed; then
    echo "$_log_prefix  no sudoers changes needed ..."
    return 0
  fi

  sudo /usr/sbin/chroot $_imagedir cp /etc/sudoers /etc/sudoers.bak

  _sudoers_additional_error_instructions='Please use visudo to manually make these changes: '
  if $_needs_requiretty_sudoers_removed; then
    sudo /usr/sbin/chroot $_imagedir bash -c "cat /etc/sudoers | grep -v 'requiretty' > /tmp/sudoers.new"
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Remove 'requiretty' line. "
  else
    sudo /usr/sbin/chroot $_imagedir cp /etc/sudoers /tmp/sudoers.new
  fi
  sudo /usr/sbin/chroot $_imagedir chmod 0440 /tmp/sudoers.new

  if $_needs_nopasswd_sudoers_added; then
    echo "$_log_prefix  Giving user $boxbuilder_user NO PASSWORD sudo privileges"
    _new_sudoers_line="%admin ALL=NOPASSWD: ALL"
    sudo /usr/sbin/chroot $_imagedir sh -c "echo '$_new_sudoers_line' >> /tmp/sudoers.new"
    _sudoers_additional_error_instructions="$_sudoers_additional_error_instructions Add a line '$_new_sudoers_line'. "
  fi

  if [[ ! -e $_imagedir/tmp/sudoers.new ]]; then
    echo "$_log_prefix error on line $LINENO - Could not add create /tmp/sudoers.new in chroot jail.  $_sudoers_additional_error_instructions"
    return 1
  fi

  if ! sudo /usr/sbin/chroot $_imagedir /usr/sbin/visudo -c -s -f /tmp/sudoers.new; then
    echo "$_log_prefix error on line $LINENO -: Syntax error in /tmp/sudoers.new in chroot jail.  $_sudoers_additional_error_instructions"
    return 1
  fi
  sudo /usr/sbin/chroot $_imagedir cp /tmp/sudoers.new /etc/sudoers
}

perform_remaining_chroot_jail_setup() {
  echo "$_log_prefix Performing remaining setup on chroot jail at $_imagedir ..."
  # Remove hostname
  sudo rm -f $_imagedir/etc/hostname
  if [[ $_platform = 'debian' ]]; then
    sudo /usr/sbin/chroot $_imagedir apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BE09C571
  fi
  sudo /usr/sbin/chroot $_imagedir su - $boxbuilder_user -c "touch /home/$boxbuilder_user/.bash_history"

  if [[ $_platform = 'redhat' ]]; then
    # script to retrieve ssh key on boot
    sudo cat <<LINES > /tmp/ssh_keypair_setup
#!/usr/bin/env bash
# chkconfig: 4 11 11
# description: Add public key from EC2 SSH keypair to authorized keys

set -o errexit

start() {
  if [[ ! -d /home/$boxbuilder_user/.ssh ]]; then
          su - $boxbuilder_user -c 'mkdir /home/$boxbuilder_user/.ssh'
          chmod 700 /home/$boxbuilder_user/.ssh
  fi
  
  # Download public ssh key from EC2 metadata HTTP API
  wget -O "/home/$boxbuilder_user/.ssh/authorized_keys" http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key
  chmod 600 "/home/$boxbuilder_user/.ssh/authorized_keys"
}

stop() {
  echo "Tick tock and ya dont stop"
}

restart() {
  stop
  start
}

case "\$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  *)
    echo "Usage: \$0 [start|stop]"
    exit 1
esac
LINES
    sudo cp /tmp/ssh_keypair_setup $_imagedir/etc/init.d/ssh_keypair_setup
    sudo chmod +x $_imagedir/etc/init.d/ssh_keypair_setup
    sudo /usr/sbin/chroot $_imagedir /sbin/chkconfig --add ssh_keypair_setup
    sudo /usr/sbin/chroot $_imagedir /sbin/chkconfig --level 345 sshd on
  fi
}

run_boxbuilder_bootstrap_in_chroot_jail_to_build_image() {
  echo "$_log_prefix Running boxbuilder_bootstrap in chroot jail to build image ..."
  echo "$_log_prefix Performing custom setup in $_imagedir using script at $boxbuilder_bootstrap_url ..."
  _boxbuilder_bootstrap_script=/tmp/${boxbuilder_bootstrap_url##*/} # grabs last path component of url to use as script name
  echo "$_log_prefix Downloading $_boxbuilder_bootstrap_script from $boxbuilder_bootstrap_url ..."
  sudo /usr/sbin/chroot $_imagedir su - $boxbuilder_user bash -c "wget -O $_boxbuilder_bootstrap_script $boxbuilder_bootstrap_url"
  echo "$_log_prefix $boxbuilder_bootstrap_url successfully downloaded to $_boxbuilder_bootstrap_script ..."

  echo "$_log_prefix Changing permissions on $_boxbuilder_bootstrap_script ..."
  sudo /usr/sbin/chroot $_imagedir chmod a+x $_boxbuilder_bootstrap_script
  echo "$_log_prefix Running $_boxbuilder_bootstrap_script ..."
  sudo /usr/sbin/chroot $_imagedir su - $boxbuilder_user bash -c "export boxbuilder_config='$boxbuilder_config' \
    && export boxbuilder_debug=$boxbuilder_debug \
    && $_boxbuilder_bootstrap_script"
  echo "$_log_prefix Finished running boxbuilder_bootstrap in chroot jail to build image ..."
}

copy_image_to_ami() {
  echo "$_log_prefix Copying image to AMI ..."
  echo "$_log_prefix Cleaning up mounts and policy-rc.d in chroot jail before copying image ..."
  _mount_output=$(sudo /usr/sbin/chroot $_imagedir mount)
  if echo $_mount_output | grep '/proc'; then
    if ! sudo /usr/sbin/chroot $_imagedir umount /proc; then
      # TODO: On centos, this sometimes gives "Couldn't umount /proc: Inappropriate ioctl for device"
      echo "$_log_prefix Error unmounting /proc in chroot jail, but we'll ignore it and hope we can still successfully copy it to the new AMI EBS image ..."
    fi
  fi
  if echo $_mount_output | grep '/dev/pts'; then
    sudo /usr/sbin/chroot $_imagedir umount /dev/pts
  fi
  sudo rm -f $_imagedir/usr/sbin/policy-rc.d
  
  _size=15 # root disk in GB
  _now=$(date +%Y%m%d-%H%M)
  _full_ami_prefix="$boxbuilder_ami_prefix-$_standard_ami_prefix-$_now"
  _full_ami_description="$_standard_ami_description $_now"

  echo "$_log_prefix Ensuring no existing volume is already attached at /dev/sdi ..."
  # TODO: why do we need set +o errexit?
  disable_error_checking
  _existing_volumeid=$(ec2-describe-volumes --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT | grep -e '^ATTACHMENT.*/dev/sdi' | cut -f2)
  enable_error_checking
  if [[ ! -z $_existing_volumeid ]]; then
    echo "$_log_prefix Volume $_existing_volumeid is already attached at /dev/sdi.  Detaching and deleting ..."
    ec2-detach-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT -f $_existing_volumeid
    ec2-delete-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT $_existing_volumeid
  fi
  echo "$_log_prefix Ensuring nothing is mounted at /dev/sdi ..."
  _mount_output=$(mount)
  if echo $_mount_output | grep '/dev/sdi'; then
    echo "$_log_prefix /dev/sdi is already mounted.  Unmounting ..."
    sudo umount /dev/sdi
  fi
  
  echo "$_log_prefix Creating new volume ..."
  _volumeid=$(ec2-create-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
    --size $_size \
    --availability-zone us-east-1a \
    | cut -f2)
  
  echo "$_log_prefix Retrieving current instance id ..."
  _instance_id=$(wget --progress=dot -qO- http://instance-data/latest/meta-data/instance-id)
  
  echo "$_log_prefix Attaching new volume $_volumeid to current instance $_instance_id at device /dev/sdi ..."
  ec2-attach-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT --device /dev/sdi --instance "$_instance_id" "$_volumeid"
  while [ ! -e /dev/sdi ]; do echo -n .; sleep 1; done
  
  echo "$_log_prefix Creating filesystem on /dev/sdi ..."
  sudo mkfs.ext3 -F /dev/sdi
  _imagedir_ebs=$_imagedir-ebs
  
  echo "$_log_prefix Mounting device /dev/sdi mounted at $_imagedir_ebs ..."
  sudo rm -rf $_imagedir_ebs
  sudo mkdir -p $_imagedir_ebs
  sudo mount -t ext3 /dev/sdi $_imagedir_ebs
  echo "$_log_prefix Copying built image from chroot jail at $_imagedir to EBS volume $_volumeid attached to device /dev/sdi mounted at $_imagedir_ebs ..."
  sudo tar -cSf - -C $_imagedir . | sudo tar xf - -C $_imagedir_ebs

  echo "$_log_prefix Unmounting $_imagedir_ebs ..."
  sudo umount $_imagedir_ebs
  echo "$_log_prefix Detaching EC2 volume $_volumeid ..."
  ec2-detach-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_volumeid"
  
  echo "$_log_prefix Creating snapshot of volume $_volumeid ..."
  _snapshotid=$(ec2-create-snapshot --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_volumeid" \
    -d 'boxbuilder_temp_resource_safe_to_terminate (if not in use by an AMI)' \
    | cut -f2)
  ec2-delete-volume --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_volumeid"
  while ec2-describe-snapshots --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_snapshotid" | grep -q pending
    do echo -n .; sleep 5; done
  _ec2_register_output=$(ec2-register --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
    --architecture $_arch \
    --name "$_full_ami_prefix" \
    --description "$_full_ami_description" \
    $_ebsopts \
    --snapshot "$_snapshotid")
  _newami=$(echo $_ec2_register_output | cut -f2)
  _newami=${_newami##IMAGE?} # strip the 'IMAGE ' prefix ('?' glob matches a space or tab as delimiter)

  echo "$_log_prefix NEW AMI SUCCESSFULLY CREATED AND REGISTERED:"
  echo "$_log_prefix grep and following output lines and evaluate them to retrieve and set local variables describing the new AMI"
  echo "------------------------------------"
  echo "boxbuilder_created_ami_id='$_newami'"
  echo "boxbuilder_created_ami_ebs_id='$_volumeid'"
  echo "boxbuilder_created_ami_ebs_snapshot_id='$_snapshotid'"
  echo "boxbuilder_created_ami_prefix='$_full_ami_prefix'"
  echo "boxbuilder_created_ami_description='$_full_ami_description'"
  echo "------------------------------------"
  echo "$_log_prefix Finished copying image to AMI ..."
}

run() {
  echo "$_log_prefix Starting ..."
  detect_platform
  setup_image_vars
  setup
  set_ec2_credentials
  install_packages
  set_up_ec2_tools
  create_chroot_jail_from_base_image
  perform_initial_chroot_jail_setup
  ensure_boxbuilder_user_exists
  grant_nopasswd_sudo_access_in_chroot
  perform_remaining_chroot_jail_setup
  run_boxbuilder_bootstrap_in_chroot_jail_to_build_image
  copy_image_to_ami
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
